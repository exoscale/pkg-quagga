From 37b1d5eb122fca90f56f8b63bf4e9a62c94c92b4 Mon Sep 17 00:00:00 2001
From: Vincent Bernat <vincent@bernat.im>
Date: Fri, 13 Apr 2018 11:12:39 +0200
Subject: [PATCH] bgpd: add basic support for ETI for BGP EVPN

Ethernet Tag ID (ETI) is part of the prefix. It cannot just be ignored
as it needs to be used when checking for prefix uniqueness. Moreover,
when using Quagga as a route reflector, we need to keep its
value. Therefore, we correctly parse and encode it. ESI is still
ignored while it should be reflected correctly.
---
 bgpd/bgp_evpn.c    | 32 ++++++++++++++++++++++----------
 bgpd/bgp_evpn_ui.c |  4 ++--
 lib/prefix.h       |  4 +++-
 3 files changed, 27 insertions(+), 13 deletions(-)

diff --git a/bgpd/bgp_evpn.c b/bgpd/bgp_evpn.c
index 20f54aaea6b5..043fe766e754 100644
--- a/bgpd/bgp_evpn.c
+++ b/bgpd/bgp_evpn.c
@@ -1744,6 +1744,7 @@ process_type2_route (struct peer *peer, afi_t afi, safi_t safi,
   u_char ipaddr_len;
   u_char macaddr_len;
   u_char *tagpnt;
+  uint32_t eth_tag;
   int ret;
 
   /* Type-2 route should be either 33, 37 or 49 bytes or an
@@ -1775,7 +1776,9 @@ process_type2_route (struct peer *peer, afi_t afi, safi_t safi,
   /* Skip over Ethernet Seg Identifier for now. */
   pfx += 10;
 
-  /* Skip over Ethernet Tag for now. */
+  /* Copy Ethernet Tag */
+  memcpy(&eth_tag, pfx, 4);
+  p.prefix.eth_tag = ntohl(eth_tag);
   pfx += 4;
 
   /* Get the MAC Addr len */
@@ -1840,6 +1843,7 @@ process_type3_route (struct peer *peer, afi_t afi, safi_t safi,
   struct prefix_rd prd;
   struct prefix_evpn p;
   u_char ipaddr_len;
+  uint32_t eth_tag;
   int ret;
 
   /* Type-3 route should be either 17 or 29 bytes: RD (8), Eth Tag (4),
@@ -1864,7 +1868,9 @@ process_type3_route (struct peer *peer, afi_t afi, safi_t safi,
   p.prefixlen = EVPN_TYPE_3_ROUTE_PREFIXLEN;
   p.prefix.route_type = BGP_EVPN_IMET_ROUTE;
 
-  /* Skip over Ethernet Tag for now. */
+  /* Copy Ethernet Tag */
+  memcpy(&eth_tag, pfx, 4);
+  p.prefix.eth_tag = ntohl(eth_tag);
   pfx += 4;
 
   /* Get the IP. */
@@ -1920,16 +1926,20 @@ bgp_evpn_route2str (struct prefix_evpn *p, char *buf, int len)
 
   if (p->prefix.route_type == BGP_EVPN_IMET_ROUTE)
     {
-      snprintf (buf, len, "[%d]:[0]:[%d]:[%s]",
-                p->prefix.route_type, IS_EVPN_PREFIX_IPADDR_V4(p) ? \
+      snprintf (buf, len, "[%d]:[%d]:[%d]:[%s]",
+                p->prefix.route_type,
+		p->prefix.eth_tag,
+		IS_EVPN_PREFIX_IPADDR_V4(p) ?		\
                 IPV4_MAX_BITLEN : IPV6_MAX_BITLEN,
                 inet_ntoa(p->prefix.ip.ip.v4_addr));
     }
   if (p->prefix.route_type == BGP_EVPN_MAC_IP_ROUTE)
     {
       if (IS_EVPN_PREFIX_IPADDR_NONE(p))
-        snprintf (buf, len, "[%d]:[0]:[0]:[%d]:[%s]",
-                  p->prefix.route_type, 8*ETHER_ADDR_LEN,
+        snprintf (buf, len, "[%d]:[%d]:[%d]:[%s]",
+                  p->prefix.route_type,
+		  p->prefix.eth_tag,
+		  8*ETHER_ADDR_LEN,
                   mac2str (&p->prefix.mac, buf1, sizeof(buf1)));
       else
         {
@@ -1937,8 +1947,10 @@ bgp_evpn_route2str (struct prefix_evpn *p, char *buf, int len)
 
           family = IS_EVPN_PREFIX_IPADDR_V4(p) ? \
                    AF_INET : AF_INET6;
-          snprintf (buf, len, "[%d]:[0]:[0]:[%d]:[%s]:[%d]:[%s]",
-                    p->prefix.route_type, 8*ETHER_ADDR_LEN,
+          snprintf (buf, len, "[%d]:[%d]:[%d]:[%s]:[%d]:[%s]",
+                    p->prefix.route_type,
+		    p->prefix.eth_tag,
+		    8*ETHER_ADDR_LEN,
                     mac2str (&p->prefix.mac, buf1, sizeof(buf1)),
                     family == AF_INET ? IPV4_MAX_BITLEN : IPV6_MAX_BITLEN,
                     inet_ntop (family, &p->prefix.ip.ip.addr,
@@ -2167,7 +2179,7 @@ bgp_evpn_encode_prefix (struct stream *s, struct prefix *p,
       case BGP_EVPN_IMET_ROUTE:
         stream_putc (s, 17); // TODO: length - assumes IPv4 address
         stream_put (s, prd->val, 8); /* RD */
-        stream_putl (s, 0); /* Ethernet Tag ID */
+        stream_putl (s, evp->prefix.eth_tag); /* Ethernet Tag ID */
         stream_putc (s, IPV4_MAX_BITLEN); /* IP address Length - bits */
         /* Originating Router's IP Addr */
         stream_put_in_addr (s, &evp->prefix.ip.ip.v4_addr);
@@ -2181,7 +2193,7 @@ bgp_evpn_encode_prefix (struct stream *s, struct prefix *p,
         stream_putc (s, 33 + ipa_len); // 1 VNI
         stream_put (s, prd->val, 8); /* RD */
         stream_put (s, 0, 10); /* ESI */
-        stream_putl (s, 0); /* Ethernet Tag ID */
+        stream_putl (s, evp->prefix.eth_tag); /* Ethernet Tag ID */
         stream_putc (s, 8*ETHER_ADDR_LEN); /* Mac Addr Len - bits */
         stream_put (s, evp->prefix.mac.octet, 6); /* Mac Addr */
         stream_putc (s, 8*ipa_len); /* IP address Length */
diff --git a/bgpd/bgp_evpn_ui.c b/bgpd/bgp_evpn_ui.c
index 88acee953a22..9573a8158b16 100644
--- a/bgpd/bgp_evpn_ui.c
+++ b/bgpd/bgp_evpn_ui.c
@@ -250,7 +250,7 @@ bgp_evpn_show_route_header (struct vty *vty, struct bgp *bgp)
            "* valid, > best, i - internal%s", VTY_NEWLINE);
   vty_out (vty, "Origin codes: i - IGP, e - EGP, ? - incomplete%s",
            VTY_NEWLINE);
-  vty_out (vty, "EVPN type-2 prefix: [2]:[ESI]:[EthTag]:[MAClen]:[MAC]%s",
+  vty_out (vty, "EVPN type-2 prefix: [2]:[EthTag]:[MAClen]:[MAC]%s",
            VTY_NEWLINE);
   vty_out (vty, "EVPN type-3 prefix: [3]:[EthTag]:[IPlen]:[OrigIP]%s%s",
            VTY_NEWLINE, VTY_NEWLINE);
@@ -976,7 +976,7 @@ bgp_evpn_show_route_rd (struct vty *vty, struct bgp *bgp,
           /* RD header and legend - once overall. */
           if (rd_header)
             {
-              vty_out (vty, "EVPN type-2 prefix: [2]:[ESI]:[EthTag]:[MAClen]:"
+              vty_out (vty, "EVPN type-2 prefix: [2]:[EthTag]:[MAClen]:"
                        "[MAC]%s", VTY_NEWLINE);
               vty_out (vty, "EVPN type-3 prefix: [3]:[EthTag]:[IPlen]:"
                        "[OrigIP]%s%s", VTY_NEWLINE, VTY_NEWLINE);
diff --git a/lib/prefix.h b/lib/prefix.h
index ddb50bcd942e..051ad40a07a5 100644
--- a/lib/prefix.h
+++ b/lib/prefix.h
@@ -60,8 +60,10 @@ struct ethaddr {
 /* EVPN address (RFC 7432) */
 struct evpn_addr
 {
-  u_char route_type;
+  uint8_t route_type;
+  uint8_t ip_prefix_length;
   struct ethaddr mac;
+  uint32_t eth_tag;
   struct ipaddr ip;
 };
 
-- 
2.17.0

