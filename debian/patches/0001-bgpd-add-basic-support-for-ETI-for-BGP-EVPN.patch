From ac442808f7a6f618684eaed724a2306e685d4191 Mon Sep 17 00:00:00 2001
From: Vincent Bernat <vincent@bernat.im>
Date: Fri, 13 Apr 2018 11:12:39 +0200
Subject: [PATCH] bgpd: add basic support for ETI for BGP EVPN

Ethernet Tag ID (ETI) is part of the prefix. It cannot just be ignored
as it needs to be used when checking for prefix uniqueness. Moreover,
when using Quagga as a route reflector, we need to keep its
value. Therefore, we correctly parse and encode it. ESI is still
ignored while it should be reflected correctly.
---
 bgpd/bgp_evpn.c    | 32 ++++++++++++++++++++++----------
 bgpd/bgp_evpn_ui.c |  4 ++--
 lib/prefix.h       |  1 +
 3 files changed, 25 insertions(+), 12 deletions(-)

Index: quagga-1.0.0+cl3u12/bgpd/bgp_evpn.c
===================================================================
--- quagga-1.0.0+cl3u12.orig/bgpd/bgp_evpn.c
+++ quagga-1.0.0+cl3u12/bgpd/bgp_evpn.c
@@ -1836,6 +1836,7 @@ process_type2_route (struct peer *peer,
   u_char ipaddr_len;
   u_char macaddr_len;
   u_char *tagpnt;
+  uint32_t eth_tag;
   int ret;
 
   /* Type-2 route should be either 33, 37 or 49 bytes or an
@@ -1867,7 +1868,9 @@ process_type2_route (struct peer *peer,
   /* Skip over Ethernet Seg Identifier for now. */
   pfx += 10;
 
-  /* Skip over Ethernet Tag for now. */
+  /* Copy Ethernet Tag */
+  memcpy(&eth_tag, pfx, 4);
+  p.prefix.eth_tag = ntohl(eth_tag);
   pfx += 4;
 
   /* Get the MAC Addr len */
@@ -1931,6 +1934,7 @@ process_type3_route (struct peer *peer,
   struct prefix_rd prd;
   struct prefix_evpn p;
   u_char ipaddr_len;
+  uint32_t eth_tag;
   int ret;
 
   /* Type-3 route should be either 17 or 29 bytes: RD (8), Eth Tag (4),
@@ -1955,7 +1959,9 @@ process_type3_route (struct peer *peer,
   p.prefixlen = EVPN_TYPE_3_ROUTE_PREFIXLEN;
   p.prefix.route_type = BGP_EVPN_IMET_ROUTE;
 
-  /* Skip over Ethernet Tag for now. */
+  /* Copy Ethernet Tag */
+  memcpy(&eth_tag, pfx, 4);
+  p.prefix.eth_tag = ntohl(eth_tag);
   pfx += 4;
 
   /* Get the IP. */
@@ -2011,16 +2017,20 @@ bgp_evpn_route2str (struct prefix_evpn *
 
   if (p->prefix.route_type == BGP_EVPN_IMET_ROUTE)
     {
-      snprintf (buf, len, "[%d]:[0]:[%d]:[%s]",
-                p->prefix.route_type, IS_EVPN_PREFIX_IPADDR_V4(p) ? \
+      snprintf (buf, len, "[%d]:[%d]:[%d]:[%s]",
+                p->prefix.route_type,
+		p->prefix.eth_tag,
+		IS_EVPN_PREFIX_IPADDR_V4(p) ?		\
                 IPV4_MAX_BITLEN : IPV6_MAX_BITLEN,
                 inet_ntoa(p->prefix.ip.ip.v4_addr));
     }
   if (p->prefix.route_type == BGP_EVPN_MAC_IP_ROUTE)
     {
       if (IS_EVPN_PREFIX_IPADDR_NONE(p))
-        snprintf (buf, len, "[%d]:[0]:[0]:[%d]:[%s]",
-                  p->prefix.route_type, 8*ETHER_ADDR_LEN,
+        snprintf (buf, len, "[%d]:[%d]:[%d]:[%s]",
+                  p->prefix.route_type,
+		  p->prefix.eth_tag,
+		  8*ETHER_ADDR_LEN,
                   mac2str (&p->prefix.mac, buf1, sizeof(buf1)));
       else
         {
@@ -2028,8 +2038,10 @@ bgp_evpn_route2str (struct prefix_evpn *
 
           family = IS_EVPN_PREFIX_IPADDR_V4(p) ? \
                    AF_INET : AF_INET6;
-          snprintf (buf, len, "[%d]:[0]:[0]:[%d]:[%s]:[%d]:[%s]",
-                    p->prefix.route_type, 8*ETHER_ADDR_LEN,
+          snprintf (buf, len, "[%d]:[%d]:[%d]:[%s]:[%d]:[%s]",
+                    p->prefix.route_type,
+		    p->prefix.eth_tag,
+		    8*ETHER_ADDR_LEN,
                     mac2str (&p->prefix.mac, buf1, sizeof(buf1)),
                     family == AF_INET ? IPV4_MAX_BITLEN : IPV6_MAX_BITLEN,
                     inet_ntop (family, &p->prefix.ip.ip.addr,
@@ -2259,7 +2271,7 @@ bgp_evpn_encode_prefix (struct stream *s
       case BGP_EVPN_IMET_ROUTE:
         stream_putc (s, 17); // TODO: length - assumes IPv4 address
         stream_put (s, prd->val, 8); /* RD */
-        stream_putl (s, 0); /* Ethernet Tag ID */
+        stream_putl (s, evp->prefix.eth_tag); /* Ethernet Tag ID */
         stream_putc (s, IPV4_MAX_BITLEN); /* IP address Length - bits */
         /* Originating Router's IP Addr */
         stream_put_in_addr (s, &evp->prefix.ip.ip.v4_addr);
@@ -2273,7 +2285,7 @@ bgp_evpn_encode_prefix (struct stream *s
         stream_putc (s, 33 + ipa_len); // 1 VNI
         stream_put (s, prd->val, 8); /* RD */
         stream_put (s, 0, 10); /* ESI */
-        stream_putl (s, 0); /* Ethernet Tag ID */
+        stream_putl (s, evp->prefix.eth_tag); /* Ethernet Tag ID */
         stream_putc (s, 8*ETHER_ADDR_LEN); /* Mac Addr Len - bits */
         stream_put (s, evp->prefix.mac.octet, 6); /* Mac Addr */
         stream_putc (s, 8*ipa_len); /* IP address Length */
Index: quagga-1.0.0+cl3u12/bgpd/bgp_evpn_ui.c
===================================================================
--- quagga-1.0.0+cl3u12.orig/bgpd/bgp_evpn_ui.c
+++ quagga-1.0.0+cl3u12/bgpd/bgp_evpn_ui.c
@@ -251,7 +251,7 @@ bgp_evpn_show_route_header (struct vty *
            "* valid, > best, i - internal%s", VTY_NEWLINE);
   vty_out (vty, "Origin codes: i - IGP, e - EGP, ? - incomplete%s",
            VTY_NEWLINE);
-  vty_out (vty, "EVPN type-2 prefix: [2]:[ESI]:[EthTag]:[MAClen]:[MAC]%s",
+  vty_out (vty, "EVPN type-2 prefix: [2]:[EthTag]:[MAClen]:[MAC]%s",
            VTY_NEWLINE);
   vty_out (vty, "EVPN type-3 prefix: [3]:[EthTag]:[IPlen]:[OrigIP]%s%s",
            VTY_NEWLINE, VTY_NEWLINE);
@@ -989,7 +989,7 @@ bgp_evpn_show_route_rd (struct vty *vty,
           /* RD header and legend - once overall. */
           if (rd_header)
             {
-              vty_out (vty, "EVPN type-2 prefix: [2]:[ESI]:[EthTag]:[MAClen]:"
+              vty_out (vty, "EVPN type-2 prefix: [2]:[EthTag]:[MAClen]:"
                        "[MAC]%s", VTY_NEWLINE);
               vty_out (vty, "EVPN type-3 prefix: [3]:[EthTag]:[IPlen]:"
                        "[OrigIP]%s%s", VTY_NEWLINE, VTY_NEWLINE);
Index: quagga-1.0.0+cl3u12/lib/prefix.h
===================================================================
--- quagga-1.0.0+cl3u12.orig/lib/prefix.h
+++ quagga-1.0.0+cl3u12/lib/prefix.h
@@ -63,6 +63,7 @@ struct evpn_addr
   u_char route_type;
   struct ethaddr mac;
   struct ipaddr ip;
+  uint32_t eth_tag;
 };
 
 #define IS_EVPN_PREFIX_IPADDR_NONE(evp)  IS_IPADDR_NONE(&(evp)->prefix.ip)
